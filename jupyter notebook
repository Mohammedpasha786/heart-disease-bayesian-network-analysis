# Heart Disease Risk Prediction - Jupyter Notebook Version
# MediMystery Labs Data Detective Project

# Cell 1: Import libraries and setup
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from pgmpy.models import BayesianNetwork
from pgmpy.estimators import MaximumLikelihoodEstimator
from pgmpy.inference import VariableElimination
import networkx as nx
import warnings
warnings.filterwarnings('ignore')

print("🕵️ Heart Disease Detective - Jupyter Notebook Analysis")
print("=" * 60)

# Cell 2: Load and explore data
print("🔍 Loading heart disease data...")
df = pd.read_csv('heart_disease.csv')
print(f"✅ Data loaded! Shape: {df.shape}")

print("\n📊 Dataset Overview:")
print(f"Columns: {list(df.columns)}")
print(f"Missing values:\n{df.isnull().sum()}")
print(f"Duplicates: {df.duplicated().sum()}")

df.head()

# Cell 3: Data cleaning
print("\n🧹 Cleaning data...")
# Remove duplicates
initial_rows = len(df)
df_clean = df.drop_duplicates()
print(f"Duplicates removed: {initial_rows - len(df_clean)}")

# Remove missing values
df_clean = df_clean.dropna()
print(f"Final shape: {df_clean.shape}")

# Cell 4: Data normalization
print("\n📏 Normalizing numeric columns...")
df_normalized = df_clean.copy()

# Get numeric columns (exclude target)
numeric_cols = df_clean.select_dtypes(include=[np.number]).columns.tolist()
if 'target' in numeric_cols:
    numeric_cols.remove('target')

# Apply min-max scaling
scaler = MinMaxScaler()
df_normalized[numeric_cols] = scaler.fit_transform(df_clean[numeric_cols])
print(f"Normalized columns: {numeric_cols}")

# Cell 5: Discretization for Bayesian Network
print("\n🔢 Discretizing variables...")
df_discrete = df_normalized.copy()

# Discretize key variables into bins
continuous_vars = ['age', 'chol', 'thalach']
for var in continuous_vars:
    if var in df_discrete.columns:
        df_discrete[f'{var}_disc'] = pd.cut(
            df_discrete[var], 
            bins=3, 
            labels=['Low', 'Medium', 'High']
        )

# Prepare data for Bayesian Network
bayesian_cols = ['age_disc', 'fbs', 'target', 'chol_disc', 'thalach_disc']
available_cols = [col for col in bayesian_cols if col in df_discrete.columns]
df_bayesian = df_discrete[available_cols].copy()

# Rename for simplicity
df_bayesian = df_bayesian.rename(columns={
    'age_disc': 'age',
    'chol_disc': 'chol',
    'thalach_disc': 'thalach'
})

print(f"Bayesian data shape: {df_bayesian.shape}")
print(f"Columns: {list(df_bayesian.columns)}")

# Cell 6: Build Bayesian Network
print("\n🕸️ Building Bayesian Network...")

# Define network structure: age → fbs → target → chol, thalach
edges = [
    ('age', 'fbs'),
    ('fbs', 'target'), 
    ('target', 'chol'),
    ('target', 'thalach')
]

# Filter edges based on available columns
available_edges = [
    (source, target) for source, target in edges
    if source in df_bayesian.columns and target in df_bayesian.columns
]

print(f"Network edges: {available_edges}")

# Create and train the model
model = BayesianNetwork(available_edges)
mle = MaximumLikelihoodEstimator(model, df_bayesian)

# Fit CPDs
for node in model.nodes():
    cpd = mle.estimate_cpd(node)
    model.add_cpds(cpd)

# Validate model
if model.check_model():
    print("✅ Bayesian Network is valid!")
else:
    print("❌ Model validation failed!")

# Initialize inference engine
inference = VariableElimination(model)
print("🔮 Inference engine ready!")

# Cell 7: Visualize Network Structure
print("\n📈 Creating network visualization...")
plt.figure(figsize=(12, 8))

# Create network graph
G = nx.DiGraph()
G.add_edges_from(model.edges())

# Layout and visualization
pos = nx.spring_layout(G, k=3, iterations=50)
nx.draw(G, pos,
        with_labels=True,
        node_color='lightblue', 
        node_size=3000,
        font_size=12,
        font_weight='bold',
        arrows=True,
        arrowsize=20,
        edge_color='gray',
        arrowstyle='->',
        connectionstyle='arc3,rad=0.1')

plt.title("Heart Disease Bayesian Network Structure", fontsize=16, fontweight='bold')
plt.tight_layout()
plt.show()

# Cell 8: Probabilistic Inference
print("\n🔮 Performing probabilistic inference...")

# Query 1: P(Heart Disease | High Age)
try:
    if 'age' in model.nodes() and 'target' in model.nodes():
        query1 = inference.query(variables=['target'], evidence={'age': 'High'})
        print("🎯 P(Heart Disease | High Age):")
        print(query1)
        
        # Extract probabilities for visualization
        prob_no_disease = query1.values[0]
        prob_disease = query1.values[1]
        
        print(f"   No Heart Disease: {prob_no_disease:.3f} ({prob_no_disease*100:.1f}%)")
        print(f"   Heart Disease: {prob_disease:.3f} ({prob_disease*100:.1f}%)")
        print()
except Exception as e:
    print(f"Query 1 error: {e}")

# Query 2: P(Cholesterol | Heart Disease = Yes)
try:
    if 'chol' in model.nodes() and 'target' in model.nodes():
        query2 = inference.query(variables=['chol'], evidence={'target': 1})
        print("🎯 P(Cholesterol | Heart Disease = Yes):")
        print(query2)
        
        # Extract probabilities
        prob_values = query2.values
        categories = ['Low', 'Medium', 'High']
        
        for i, (cat, prob) in enumerate(zip(categories, prob_values)):
            print(f"   {cat} Cholesterol: {prob:.3f} ({prob*100:.1f}%)")
        print()
except Exception as e:
    print(f"Query 2 error: {e}")

# Query 3: P(Fasting Blood Sugar | Medium Age)
try:
    if 'fbs' in model.nodes() and 'age' in model.nodes():
        query3 = inference.query(variables=['fbs'], evidence={'age': 'Medium'})
        print("🎯 P(Fasting Blood Sugar | Medium Age):")
        print(query3)
        
        prob_values = query3.values
        fbs_labels = ['Normal (≤120)', 'High (>120)']
        
        for i, (label, prob) in enumerate(zip(fbs_labels, prob_values)):
            print(f"   {label}: {prob:.3f} ({prob*100:.1f}%)")
        print()
except Exception as e:
    print(f"Query 3 error: {e}")

# Cell 9: Inference Results Visualization
print("\n📊 Creating inference visualizations...")

fig, axes = plt.subplots(2, 2, figsize=(15, 10))
axes = axes.ravel()

# Plot 1: Heart Disease Risk by Age Groups
try:
    age_groups = ['Low', 'Medium', 'High']
    disease_probs = []
    
    for age_group in age_groups:
        if 'age' in model.nodes() and 'target' in model.nodes():
            query = inference.query(variables=['target'], evidence={'age': age_group})
            disease_prob = query.values[1]  # Probability of disease (target=1)
            disease_probs.append(disease_prob)
    
    axes[0].bar(age_groups, disease_probs, color=['lightgreen', 'orange', 'red'], alpha=0.7)
    axes[0].set_title('Heart Disease Risk by Age Group', fontweight='bold')
    axes[0].set_ylabel('Probability of Heart Disease')
    axes[0].set_ylim(0, 1)
    
    # Add percentage labels
    for i, prob in enumerate(disease_probs):
        axes[0].text(i, prob + 0.02, f'{prob*100:.1f}%', ha='center', fontweight='bold')
        
except Exception as e:
    axes[0].text(0.5, 0.5, f'Error: {e}', ha='center', va='center', transform=axes[0].transAxes)

# Plot 2: Cholesterol Distribution in Heart Disease Patients
try:
    if 'chol' in model.nodes() and 'target' in model.nodes():
        query = inference.query(variables=['chol'], evidence={'target': 1})
        chol_probs = query.values
        chol_labels = ['Low', 'Medium', 'High']
        
        colors = ['lightblue', 'gold', 'lightcoral']
        bars = axes[1].bar(chol_labels, chol_probs, color=colors, alpha=0.7)
        axes[1].set_title('Cholesterol Levels in Heart Disease Patients', fontweight='bold')
        axes[1].set_ylabel('Probability')
        axes[1].set_ylim(0, max(chol_probs) * 1.2)
        
        # Add percentage labels
        for bar, prob in zip(bars, chol_probs):
            height = bar.get_height()
            axes[1].text(bar.get_x() + bar.get_width()/2., height + 0.01,
                        f'{prob*100:.1f}%', ha='center', va='bottom', fontweight='bold')
            
except Exception as e:
    axes[1].text(0.5, 0.5, f'Error: {e}', ha='center', va='center', transform=axes[1].transAxes)

# Plot 3: Fasting Blood Sugar by Age
try:
    age_groups = ['Low', 'Medium', 'High']
    fbs_high_probs = []
    
    for age_group in age_groups:
        if 'fbs' in model.nodes() and 'age' in model.nodes():
            query = inference.query(variables=['fbs'], evidence={'age': age_group})
            fbs_high_prob = query.values[1]  # Probability of high FBS
            fbs_high_probs.append(fbs_high_prob)
    
    axes[2].bar(age_groups, fbs_high_probs, color=['lightgreen', 'orange', 'red'], alpha=0.7)
    axes[2].set_title('High Fasting Blood Sugar by Age Group', fontweight='bold')
    axes[2].set_ylabel('Probability of High FBS')
    axes[2].set_ylim(0, max(fbs_high_probs) * 1.2 if fbs_high_probs else 1)
    
    # Add percentage labels
    for i, prob in enumerate(fbs_high_probs):
        axes[2].text(i, prob + 0.02, f'{prob*100:.1f}%', ha='center', fontweight='bold')
        
except Exception as e:
    axes[2].text(0.5, 0.5, f'Error: {e}', ha='center', va='center', transform=axes[2].transAxes)

# Plot 4: Overall Heart Disease Distribution
try:
    if 'target' in model.nodes():
        query = inference.query(variables=['target'])
        target_probs = query.values
        target_labels = ['No Disease', 'Heart Disease']
        
        colors = ['lightgreen', 'lightcoral']
        pie = axes[3].pie(target_probs, labels=target_labels, colors=colors, autopct='%1.1f%%',
                         startangle=90, textprops={'fontweight': 'bold'})
        axes[3].set_title('Overall Heart Disease Distribution', fontweight='bold')
        
except Exception as e:
    axes[3].text(0.5, 0.5, f'Error: {e}', ha='center', va='center', transform=axes[3].transAxes)

plt.tight_layout()
plt.show()

# Cell 10: Model Performance Analysis
print("\n🎯 Model Performance Analysis")
print("=" * 50)

# Display Conditional Probability Distributions
print("\n📋 Conditional Probability Distributions:")
for cpd in model.get_cpds():
    print(f"\n{cpd.variable}:")
    print(cpd)

# Cell 11: Clinical Insights and Recommendations
print("\n🩺 Clinical Insights and Recommendations")
print("=" * 50)

# Calculate key statistics
try:
    # Risk by age groups
    print("📊 RISK STRATIFICATION BY AGE:")
    age_groups = ['Low', 'Medium', 'High']
    for age_group in age_groups:
        if 'age' in model.nodes() and 'target' in model.nodes():
            query = inference.query(variables=['target'], evidence={'age': age_group})
            risk = query.values[1] * 100
            risk_level = "HIGH" if risk > 60 else "MEDIUM" if risk > 40 else "LOW"
            print(f"   {age_group} Age: {risk:.1f}% risk ({risk_level})")
    
    print("\n🔍 KEY FINDINGS:")
    
    # Find highest risk scenario
    high_age_query = inference.query(variables=['target'], evidence={'age': 'High'})
    high_age_risk = high_age_query.values[1] * 100
    
    print(f"   • Highest risk group: High age patients ({high_age_risk:.1f}% risk)")
    
    # Cholesterol patterns
    chol_query = inference.query(variables=['chol'], evidence={'target': 1})
    dominant_chol_idx = np.argmax(chol_query.values)
    chol_categories = ['Low', 'Medium', 'High']
    dominant_chol = chol_categories[dominant_chol_idx]
    dominant_chol_prob = chol_query.values[dominant_chol_idx] * 100
    
    print(f"   • Most common cholesterol in heart disease: {dominant_chol} ({dominant_chol_prob:.1f}%)")
    
    print("\n💡 CLINICAL RECOMMENDATIONS:")
    print("   1. Prioritize screening for patients in high age groups")
    print("   2. Monitor fasting blood sugar as an intermediate risk marker")
    print("   3. Consider cholesterol patterns in risk assessment")
    print("   4. Implement preventive measures for medium-risk patients")
    
except Exception as e:
    print(f"Analysis error: {e}")

# Cell 12: Save Results
print("\n💾 Saving analysis results...")

# Save cleaned datasets
df_clean.to_csv('cleaned_heart_disease.csv', index=False)
df_normalized.to_csv('normalized_heart_disease.csv', index=False)
df_bayesian.to_csv('discretized_heart_disease.csv', index=False)

print("✅ Datasets saved:")
print("   - cleaned_heart_disease.csv")
print("   - normalized_heart_disease.csv") 
print("   - discretized_heart_disease.csv")

# Generate summary report
summary_report = f"""
# Heart Disease Analysis Summary Report

## Dataset Statistics
- Original records: {len(df)}
- Clean records: {len(df_clean)}
- Features analyzed: {len(df_bayesian.columns)}

## Bayesian Network
- Structure: {' → '.join([f'{edge[0]}' for edge in available_edges] + [available_edges[-1][1]])}
- Nodes: {len(model.nodes())}
- Edges: {len(model.edges())}

## Key Insights
- Model validation: {'✅ Passed' if model.check_model() else '❌ Failed'}
- High age group risk: {high_age_risk:.1f}%
- Dominant cholesterol pattern: {dominant_chol}

## Files Generated
- Network visualization
- Inference results plots
- Cleaned datasets
- Analysis summary

Generated by MediMystery Labs Data Detective System
"""

with open('analysis_summary.md', 'w') as f:
    f.write(summary_report)

print("   - analysis_summary.md")

print("\n🎉 ANALYSIS COMPLETE!")
print("=" * 60)
print("🕵️ Heart Disease Detective has successfully completed the investigation!")
print("📋 All results, visualizations, and datasets have been generated.")
print("🩺 Clinical insights are ready for medical review and implementation.")
